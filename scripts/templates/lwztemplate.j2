"""Modbus api for stiebel eltron heat pumps. This file is generated. Do not modify it manually."""
from enum import Enum

from . import ModbusRegister, ModbusRegisterBlock, StiebelEltronAPI, IsgRegisters, RegisterType, ENERGY_DATA_BLOCK_NAME, VIRTUAL_REGISTER_OFFSET, VIRTUAL_TOTAL_AND_DAY_REGISTER_OFFSET, ENERGY_MANAGEMENT_SETTINGS_REGISTERS, ENERGY_SYSTEM_INFORMATION_REGISTERS

{% for registerblock in registers %}
class {{heatpump_type}}{{python_class_name(registerblock["name"])}}Registers(IsgRegisters):
{% for register in registerblock["register_block"] %}
    {{python_name(register[1], register[10])}} = {{register[0]}}{%if registerblock["name"]=="Energy Data" and register[10][:3]=="LOW" %}
    {{python_name(register[1], register[10][3:].strip())}} = {{register[0] | int + 100000}} {% endif %}{%if register[1][-3:]=="DAY" %}
    {{python_name(register[1]+"_AND_TOTAL", register[10].strip())}} = {{register[0] | int + 200001}} {% endif %}  {% endfor %}
    {%if registerblock["name"]=="System Values"%}COMPRESSOR_STARTS = 100032{% endif %}
{% endfor %}



{% for registerblock in registers %}
{{heatpump_type.upper()}}_{{python_name(registerblock["name"]).upper()}}_REGISTERS = {
{% for register in registerblock["register_block"] %}
    {{heatpump_type}}{{python_class_name(registerblock["name"])}}Registers.{{python_name(register[1], register[10])}}: ModbusRegister(address={{register[0]}}, name="{{register[1]}}", unit="{{register[8]}}", min={{float_or_none(register[5])}}, max={{float_or_none(register[6])}}, data_type={{register[7]}}, key={{heatpump_type}}{{python_class_name(registerblock["name"])}}Registers.{{python_name(register[1], register[10])}}),{% endfor %}
}
{% endfor %}

class OperatingMode(Enum):
    """Enum for the operation mode of the heat pump."""
    # AUTOMATIK
    AUTOMATIC = 11
    # BEREITSCHAFT
    STANDBY = 1
    # TAGBETRIEB
    DAY_MODE = 3
    # ABSENKBETRIEB
    SETBACK_MODE = 4
    # WARMWASSER
    DHW = 5
    # HANDBETRIEB
    MANUAL_MODE = 14
    # NOTBETRIEB
    EMERGENCY_OPERATION = 0



class {{heatpump_type}}StiebelEltronAPI(StiebelEltronAPI):

    def __init__(self, host: str, port: int = 502, slave: int = 1) -> None:
        super().__init__([
            {% for registerblock in registers %}
                ModbusRegisterBlock(base_address={{registerblock["base_address"]}}, count={{registerblock["count"]}}, name="{{registerblock["name"]}}", registers={{heatpump_type.upper()}}_{{python_name(registerblock["name"]).upper()}}_REGISTERS, register_type={{registerblock["register_type"]}}),{% endfor %}
                ModbusRegisterBlock(base_address=4000, count=3, name="Energy Management Settings", registers=ENERGY_MANAGEMENT_SETTINGS_REGISTERS, register_type=RegisterType.HOLDING_REGISTER),
                ModbusRegisterBlock(base_address=5000, count=2, name="Energy System Information", registers=ENERGY_SYSTEM_INFORMATION_REGISTERS, register_type=RegisterType.INPUT_REGISTER),
            ],
            host, port, slave)

    async def async_update(self):
        """Request current values from heat pump."""
        await super().async_update()
        for registerblock in self._register_blocks:
            if registerblock.name == ENERGY_DATA_BLOCK_NAME:
                registers = [r.value for r in {{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers]
                registers.sort()
                for register in registers:
                    if register > VIRTUAL_REGISTER_OFFSET:
                        if register > VIRTUAL_TOTAL_AND_DAY_REGISTER_OFFSET:
                            total_key = {{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register - VIRTUAL_TOTAL_AND_DAY_REGISTER_OFFSET + VIRTUAL_REGISTER_OFFSET)
                            day_key = {{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register - VIRTUAL_TOTAL_AND_DAY_REGISTER_OFFSET - 1)
                            total_value = self._data.get(total_key)
                            day_value = self._data.get(day_key)
                            if total_value is not None and day_value is not None:
                                prev_value = self._previous_data.get({{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register))
                                if prev_value is not None:
                                    self._data[{{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register)] = max(total_value + day_value, prev_value)
                                else:
                                    self._data[{{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register)] = total_value + day_value
                        else:
                            low_key = {{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register - VIRTUAL_REGISTER_OFFSET)
                            high_key = {{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register - VIRTUAL_REGISTER_OFFSET + 1)
                            high_value = self._data.get(high_key)
                            low_value = self._data.get(low_key)
                            if high_value is not None and low_value is not None:
                                self._data[{{heatpump_type}}{{python_class_name(ENERGY_DATA_BLOCK_NAME)}}Registers(register)] = high_value * 1000 + low_value

        compressor_starts_high = self.get_register_value(LwzSystemValuesRegisters.COMPRESSOR_STARTS_HI)
        if compressor_starts_high is None or compressor_starts_high == 32768:
            self._data[LwzSystemValuesRegisters.COMPRESSOR_STARTS] = 32768
        else:
            compressor_starts_low = self.get_register_value(LwzSystemValuesRegisters.COMPRESSOR_STARTS_LOW)
            if compressor_starts_low is None:
                self._data[LwzSystemValuesRegisters.COMPRESSOR_STARTS] = compressor_starts_high * 1000
            else:
                self._data[LwzSystemValuesRegisters.COMPRESSOR_STARTS] = compressor_starts_high * 1000 + compressor_starts_low


    def get_current_temp(self):
        """Get the current room temperature."""
        return self.get_register_value(LwzSystemValuesRegisters.ACTUAL_ROOM_T_HC1)

    def get_target_temp(self):
        """Get the target room temperature."""
        return self.get_register_value(LwzSystemParametersRegisters.ROOM_TEMPERATURE_DAY_HK1)

    async def set_target_temp(self, temp):
        """Set the target room temperature (day)(HC1)."""
        await self.write_register_value(LwzSystemParametersRegisters.ROOM_TEMPERATURE_DAY_HK1, temp)


    def get_current_humidity(self):
        """Get the current room humidity."""
        return self.get_register_value(LwzSystemValuesRegisters.RELATIVE_HUMIDITY_HC1)


    # Handle operation mode

    def get_operation(self) -> OperatingMode:
        """Return the current mode of operation."""
        op_mode = int(self.get_register_value(LwzSystemParametersRegisters.OPERATING_MODE))
        return OperatingMode(op_mode)

    async def set_operation(self, mode: OperatingMode):
        """Set the operation mode."""
        await self.write_register_value(LwzSystemParametersRegisters.OPERATING_MODE, mode.value)


    def get_heating_status(self) -> bool:
        """Return heater status."""
        return bool(int(self.get_register_value(LwzSystemStateRegisters.OPERATING_STATUS)) & (1 << 2))

    def get_cooling_status(self) -> bool:
        """Cooling status."""
        return bool(int(self.get_register_value(LwzSystemStateRegisters.OPERATING_STATUS)) & (1 << 3))

    def get_filter_alarm_status(self) -> bool:
        """Return filter alarm."""
        filter_mask = (1 << 8) | (1 << 12) | (1 << 13)
        return bool(int(self.get_register_value(LwzSystemStateRegisters.OPERATING_STATUS)) & filter_mask)

